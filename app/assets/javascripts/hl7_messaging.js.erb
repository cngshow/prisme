function toggleResultTable(elem) {
    var tbl = $(elem).closest('.result_hdr').find('.result_table');
    tbl.toggle("slow", function () {
        var clazz = tbl.is(":visible") ? 'fa fa-minus-square' : 'fa fa-plus-square';
        $(elem).find('.fa').removeClass().addClass(clazz);
    });
}

function discoveryCsv(btn) {
    var detail_id = $(btn).closest('.btn-group').data('btngroup_detail_id');
    $(btn).attr('disabled', true);

    $.get(gon.routes.discovery_csv_path, {format: 'txt', discovery_detail_id: detail_id}, function (data) {
        var blob = new Blob([data], {type: "text/plain;charset=utf-8"});
        saveAs(blob, 'discovery_' + detail_id + '.csv');
        $(btn).attr('disabled', false);
    });
}

function discoveryDiffs(btn) {
    var btnGroup = $(btn).closest('.btn-group');
    var detail_id = btnGroup.data('btngroup_detail_id');
    var site_name = $(btn).closest('tr').find('.site_name').text();
    var subset_name = $(btn).closest('tr').find('.subset_name').text();
//    var loading_data_msg = '<tr><td colspan="99">LOADING....</td></tr>'

    // disable the btn and set the loading message into each table. Data is replaced with the AJAX results
    $(btn).attr('disabled', true);
//    $('#tbl_discovery_diffs').find('tbody').html(loading_data_msg);
//    $('#tbl_discovery_diffs_vista_only').find('tbody').html(loading_data_msg);
//    $('#tbl_discovery_diffs_isaac_only').find('tbody').html(loading_data_msg);

    //set the title for the modal
    var $diffsSiteSubsetHeader = $('#diffs_site_subset_header');
    $diffsSiteSubsetHeader.find('span#site_hdr').text(site_name);
    $diffsSiteSubsetHeader.find('span#subset_hdr').text(subset_name);

    // show the modal and re-enable the button
    $('#discoveryDiffsModal').modal('show');
    $(btn).attr('disabled', false);

    var vistaOnly = GridHelper.singletonBuild('ag-grid_vista_only');
    var isaacOnly = GridHelper.singletonBuild('ag-grid_isaac_only');
    var diffs = GridHelper.singletonBuild('ag-grid_diffs');
    vistaOnly.refreshRows([], []);
    isaacOnly.refreshRows([], []);
    diffs.refreshRows([], []);

//    todo  you need to turn off polling while this is open? yes?!
    $.get(gon.routes.discovery_diffs_path, {discovery_detail_id: detail_id}, function (data) {
//        $('#tbl_discovery_diffs').find('tbody').html(data['diff_rows'])
//        $('#tbl_discovery_diffs_vista_only').find('tbody').html(data['vista_rows'])
//        $('#tbl_discovery_diffs_isaac_only').find('tbody').html(data['isaac_rows'])
        var headers = data['headers']
        vistaOnly.refreshRows(headers, data['vista_only']);
        isaacOnly.refreshRows(headers, data['isaac_only']);

        var diffHeaders = [
            {headerName: 'VUID', field: 'vuid', width: 90, minWidth: 90, maxWidth: 90, suppressResize: true, suppressSizeToFit: true},
//            {headerName: 'Designation', field: 'designation', cellRenderer: diffs.renderWithTitle},
            {headerName: 'Designation', field: 'designation'},
            {headerName: 'Field Name', field: 'field_name'},
            {headerName: 'VistA Value', field: 'vista_value'},
            {headerName: 'ISAAC Value', field: 'isaac_value'},
        ];
console.log("diff data is " + JSON.stringify(data['diffs']));
//        "[{:vuid=>:"4688714",   :designation=>"UPPER ARM",   :field_name=>"VistA_Mapping_Target",   :vista_value=>"SCT",   :isaac_value=>"SCT_different"},  {:vuid=>:"4688714",   :designation=>"UPPER ARM",   :field_name=>"VistA_Short_Name",   :vista_value=>"UpA",   :isaac_value=>"UpA_different"}] "

        //        diffs.refreshRows(diffHeaders, data['diffs']);
    });
}

function init_checksum_table_polling() {
    $('.checksum_table').each(function (index, value) {
        var jqt = $(this);

        setTimeout(function () {
            checksum_discovery_table_poll(gon.routes.checksum_request_poll_path, jqt);
        }, 5000);
    });
}

function init_discovery_polling() {
    $('.discovery_table').each(function (index, value) {
        var jqt = $(this);

        setTimeout(function () {
            checksum_discovery_table_poll(gon.routes.discovery_request_poll_path, jqt);
        }, 5000);
    });
}

function checksum_discovery_table_poll(poll_path, jqt) {
    var domain = jqt.data('domain');
    var id = jqt.data('request_id');
    var table_id = jqt.attr('id');
    var poll_done = jqt.data('done');

    console.log("domain is ->" + domain + "<-");
    console.log("request_id is ->" + id + "<-");
    console.log("table_id is ->" + table_id + "<-");

    // check to see if the table is still in the DOM
    if ($('#' + table_id).length == 0) {
        console.log("table " + table_id + " is no longer available so bailing out...");
        return false;
    }

    $.get(poll_path, {request_id: id, domain: domain, table_id: table_id}, function (data) {
        jqt.find('tbody').html(data);

        console.log("polling " + table_id + "------------done? " + poll_done);

        //check if we continue polling
        if (poll_done !== undefined && !poll_done) {
            setTimeout(function () {
                checksum_discovery_table_poll(poll_path, jqt);
            }, 5000);
        }
    });
}

//function for displaying hl7 message data with discovery
function discovery_hl7_message(link, obj) {
    var $viewDiscoveryHl7Modal = $('#view_discovery_hl7_modal');
    $viewDiscoveryHl7Modal.modal('hide');

    var hl7_message = $(link).data('hl7_message');
    var tr_id = obj.tr_id;
    var current = obj.current;
    var row = $('#' + tr_id);
    var site_name = row.find('td.site_name').text();
    var subset_name = row.find('td.subset_name').text();
    var label = current ? '<%=Hl7MessagingController::CURRENT_TAG%>' : '<%=Hl7MessagingController::PREVIOUS_TAG%>';

    $('#discovery_label').text(label);
    $('#view_discovery_hl7_modal_title').text(site_name + ' - ' + subset_name);
    $('#textarea_discovery_hl7').val(hl7_message);
    $('#btn_discovery_csv').data('detail_id', tr_id.split('_')[1] + '_' + label);
    $viewDiscoveryHl7Modal.modal('show');
}

var GridHelper = (function () {
    function renderWithTitle(params) {
        // put a tooltip on the value
        return '<span title="' + params.value + '">' + params.value + '</span>';
    }
    var instanceMap = {};

    function init(div_id) {
        if (instanceMap[div_id] === undefined) {
            instanceMap[div_id] = {};

            instanceMap[div_id].cellClicked = function (params) {
                var text = params.key;
                console.log(text);
            }

            instanceMap[div_id].grid_options = {};

            //class methods go here
            instanceMap[div_id].refreshRows = function (headers, data) {
                //process headers
                if (this.grid_options.api !== undefined) {
                    this.grid_options.api.destroy();
                }
                var gridOptions = {
                    columnDefs: [],
                    rowData: [],
                    enableColResize: true,
                    pagination: true,
                    paginationAutoPageSize: true,
                    onCellClicked: instanceMap[div_id].cellClicked,
                    suppressMovableColumns: true
//        onPaginationChanged: resizeColumnsOnPaginationChanged
                };
                // lookup the container we want the Grid to use
                this.eGridDiv = document.getElementById(div_id);
                this.grid_options = gridOptions;//JSON.parse(JSON.stringify(gridOptions));//Clone it.
                this.grid = new agGrid.Grid(this.eGridDiv, this.grid_options);
                var headerArray = [];

                for (var s in headers) {
                    headerArray.push({headerName: headers[s], field: headers[s], cellRenderer: renderWithTitle})
                }
                this.grid_options.api.setColumnDefs(headerArray);

                this.grid_options.api.setRowData(data);
                this.grid_options.api.sizeColumnsToFit();
            }
        }

        return instanceMap[div_id];
    }

    return {
        singletonBuild: init,
    };
})();

