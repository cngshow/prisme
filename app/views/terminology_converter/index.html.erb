<style>
  html, body {
    padding: 5px;
  }

  .ajax-table {
    font-family: calibri, arial;
    width: 100%;
  }

  .ajax-table thead td {
    background-color: #8CCCF1;
    font-weight: bold;
    text-align: center;
    vertical-align: bottom;
  }

  .ajax-table td {
    border: 1px solid #466E85;
    width: 136px;
    padding: 7px;
  }
</style>

<!-- Trigger the modal with a button -->
<button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal" onclick="reset_form();">Request New Build</button>

<h1>Terminology Converter Dashboard</h1>
<div>
  <label for="filter_rows">Filter Results:&nbsp;&nbsp;</label>
  <select id="filter_rows" onchange="poll();">
    <option value="15">15 Rows</option>
    <option value="30">30 Rows</option>
    <option value="45">45 Rows</option>
    <option value="60">60 Rows</option>
    <option value="999999">All Rows</option>
  </select>
</div>
<table id="data-table" class="ajax-table">
  <thead>
  <tr>
    <td>Job Name</td>
    <td>Started At</td>
    <td>User Name</td>
    <td>Jenkins Build Name</td>
    <td>Attempts</td>
    <td>Build Result</td>
    <td>Last Check<br>Completed At</td>
    <td>Elapsed Time</td>
    <td>Jenkins Job<br>Deleted?</td>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="9" style="text-align:center">There are no items to list...</td>
  </tr>
  </tbody>
</table>
<br/>

<!-- Modal -->
<div id="myModal" class="modal fade" role="dialog">
  <div class="modal-dialog">

    <!-- Modal content-->
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">Select the Terminology Source</h4>
      </div>
      <div class="modal-body">
        <%= form_tag(:controller => 'terminology_converter', :action => :request_build, remote: true) do |f| %>
            <%= label_tag 'terminology_source', 'Terminology Source' %><br>
            <%= select_tag 'terminology_source', options_for_select(@options.collect { |o| [o[:key], o[:value]] }), :include_blank => '-- Select the Terminology Source --', required: true %>
            <br>
            <br>
            <div class="modal-footer">
              <%= submit_tag 'Submit', data: {disable_with: 'Please wait...'}, class: 'btn btn-primary', onclick: "$('#terminology_source').readonly=true" %>
            </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
  function reset_form() {
    $('#terminology_source').find('option[value=""]').prop('selected', 'selected').change();
  }

  function build_status_renderer(params) {
    var ret = "\<span style=\"color: COLOR\"\>IMG" + params + "\<\/span\>";
    var img = '';
    var color = 'black';

    switch (params) {
      case '<%= JenkinsCheckBuild::BuildResult::INQUEUE %>':
      case '<%= JenkinsCheckBuild::BuildResult::IN_PROCESS %>':
      case '<%= JenkinsCheckBuild::BuildResult::REBUILDING %>':
      case '<%= JenkinsCheckBuild::BuildResult::BUILDING %>':
      default:
        img = "\<img src=\"ajax-loader.gif\"\/>";
        break;
      case '<%= JenkinsCheckBuild::BuildResult::SUCCESS %>':
        color = 'green';
        break;
      case '<%= JenkinsCheckBuild::BuildResult::SERVER_ERROR %>':
      case '<%= JenkinsCheckBuild::BuildResult::FAILURE %>':
      case '<%= JenkinsCheckBuild::BuildResult::ABORTED %>':
      case '<%= JenkinsCheckBuild::BuildResult::UNKNOWN %>':
      case '<%= JenkinsCheckBuild::BuildResult::UNSTABLE %>':
        color = "red";
        break;
    }

    ret = ret.replace("COLOR", color);
    ret = ret.replace("IMG", img);
    return ret;
  }

  function format_epoch_in_local(epoch) {
    var ret = epoch;

    if ($.isNumeric(epoch)) {
      var i = parseInt(epoch) * 1000;
      ret = new Date(i).toLocaleString();
    }
    return ret;
  }

  /*
   {"job_id":"4c0a2d3c-255d-429e-9dfb-68739d8d9f11","job_name":"JenkinsStartBuild","status":4,"queue":"default","scheduled_at":"2016-04-27T20:59:49.841Z",
   "enqueued_at":"2016-04-27T20:59:49.902Z","started_at":"2016-04-27T20:59:49.911Z","completed_at":"2016-04-27T20:59:51.312Z","last_error":null,
   "result":"Jenkins server created.Jenkins job PRISME_ISAAC-term-convert-loinc_2016_04_27T16_59_49 created.Jenkins build started.","user":null,
   "parent_job_id":null,"root_job_id":null,"leaf":false,"json_data":"null","created_at":"2016-04-27T20:59:49.851Z","updated_at":"2016-04-27T21:00:21.795Z",
   "leaf_data":{"jenkins_check_job_id":"7d0826f8-6c55-46a3-8c0e-36b1a8456ced","jenkins_job_name":"PRISME_ISAAC-term-convert-loinc_2016_04_27T16_59_49",
   "jenkins_attempt_number":1,"jenkins_build_result":"SUCCESS","jenkins_job_deleted":"yes"}}
   */
  var fields = ['job_name', 'started_at', 'user', 'leaf_data.jenkins_job_name', 'leaf_data.jenkins_attempt_number', 'leaf_data.jenkins_build_result', 'leaf_data.completed_at', 'leaf_data.elapsed_time', 'leaf_data.jenkins_job_deleted'];

  function loadTable(tableId, fields, data) {
    var rows = '';
    if (data.length > 0) {
      $.each(data, function (index, row) {
        var tr_data = '<tr>';

        $.each(fields, function (index, field) {
          if (field === 'started_at') {
            tr_data += '<td>' + format_epoch_in_local(row.started_at) + '</td>';
          }
          else if (field === 'leaf_data.jenkins_build_result') {
            tr_data += '<td>' + build_status_renderer(row.leaf_data.jenkins_build_result) + '</td>';
          }
          else if (field === 'leaf_data.completed_at') {
            tr_data += '<td>' + format_epoch_in_local(row.leaf_data.completed_at) + '</td>';
          }
          else {
            tr_data += '<td>' + eval('row.' + field) + '</td>';
          }
        });
        rows += tr_data + '<tr>';
      });
    }
    else {
      rows = '<tr><td colspan="9" style="text-align:center">There are no items to list...</td></tr>'
    }
    $('#' + tableId + ' tbody').html(rows);
  }

  function poll() {
    console.log('calling poll');
    var row_limit = parseInt($('#filter_rows').find('option:selected').val());

    $.getJSON(gon.routes.terminology_converter_load_build_data_path, {row_limit: row_limit}, function (data) {
      loadTable('data-table', fields, data);

      <% if Rails.env.development? %>
      if (polling.isPolling('terminology_converter')) {
        $.getJSON(gon.routes.terminology_converter_check_polling_path, {}, function (data) {
          console.log(JSON.stringify(data));
          if (data.poll === false) {
            polling.unregisterController('terminology_converter');

            //call final poll in case there is a timing issue
            poll();
          }
        });
      }
      <% end %>
    });
  }

  $(document).ready(function () {
    poll();

    //register for polling
    polling.registerController('terminology_converter', poll, 5000);
  });
</script>
