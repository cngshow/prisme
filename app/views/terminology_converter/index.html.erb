<!-- Trigger the modal with a button -->
<button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal" onclick="reset_form();">Request New Build</button>

<div class="page-header">
  <h1>Terminology Converter Dashboard</h1>
</div>
<!--todo use the filter_table_poll_results.html.erb -->
<div>
  <label for="filter_rows">Filter Results:&nbsp;&nbsp;</label>
  <select id="filter_rows" onchange="poll();">
    <option value="15">15 Rows</option>
    <option value="30">30 Rows</option>
    <option value="45">45 Rows</option>
    <option value="60">60 Rows</option>
    <option value="999999">All Rows</option>
  </select>
</div>
<table id="data-table" class="prisme-table table-striped table-hover">
  <thead>
  <tr>
    <th>Job Name</th>
    <th>Started At</th>
    <th>User Name</th>
    <th>Jenkins Build Name</th>
    <th>Attempts</th>
    <th>Build Result</th>
    <th>Last Check<br>Completed At</th>
    <th>Elapsed Time</th>
    <th>Jenkins Job<br>Deleted?</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="9" style="text-align:center">There are no items to list...</td>
  </tr>
  </tbody>
</table>
<br/>

<!-- Modal -->
<div id="myModal" class="modal fade" role="dialog">
  <div class="modal-dialog">

    <!-- Modal content-->
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">Terminology Conversion Request</h4>
      </div>
      <div class="modal-body">
        <%= form_tag(terminology_converter_request_build_path, remote: true, id: 'myForm') do %>
            <%= label_tag 'terminology_source', 'Terminology Source' %><br>
            <%= select_tag 'terminology_source',
                           options_from_collection_for_select(@sources, :option_key, :option_value),
                           :class => 'select2-prisme',
                           :include_blank => true,
                           :data => {ph: 'Select the Terminology Source',
                                     w: '500px',
                                     single_select: true
                           },
                           :onchange => 'term_source_change(this.value)',
                           required: true
            %>
            <br>
            <br>
            <div id="term_source_details_div"></div>
            <div id="term_source_actions_div" class="modal-footer">
              <%= submit_tag 'Submit', data: {disable_with: 'Processing Request...'}, class: 'btn btn-primary' %>
              <a data-dismiss="modal" class="btn btn-primary">Cancel</a>
            </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
  function term_source_change(val) {
    $('#term_source_actions_div').hide();
    if (val.length === 0) {
      reset_form(true);
      return false;
    }

    $.ajax({
      url: gon.routes.terminology_converter_term_source_change_path,
      type: "GET",
      data: {term_source: val},
      success: function (data) {
        $('#term_source_details_div').html(data);
      }
    });
  }

  function reset_form(term_source_change) {
    if (term_source_change !== true) {
      $('#terminology_source').find('option[value=""]').prop('selected', 'selected').change();
    }
    $('#term_source_details_div').html('');
    $('#term_source_actions_div').hide();
  }

  function build_status_renderer(params) {
    var ret = "\<span style=\"color: COLOR\"\>IMG" + params + "\<\/span\>";
    var img = '';
    var color = 'black';

    switch (params) {
      case '<%= JenkinsCheckBuild::BuildResult::INQUEUE %>':
      case '<%= JenkinsCheckBuild::BuildResult::IN_PROCESS %>':
      case '<%= JenkinsCheckBuild::BuildResult::REBUILDING %>':
      case '<%= JenkinsCheckBuild::BuildResult::BUILDING %>':
      default:
        img = "\<img src=\"ajax-loader.gif\"\/>";
        break;
      case '<%= JenkinsCheckBuild::BuildResult::SUCCESS %>':
        color = 'green';
        break;
      case '<%= JenkinsCheckBuild::BuildResult::SERVER_ERROR %>':
      case '<%= JenkinsCheckBuild::BuildResult::FAILURE %>':
      case '<%= JenkinsCheckBuild::BuildResult::ABORTED %>':
      case '<%= JenkinsCheckBuild::BuildResult::UNKNOWN %>':
      case '<%= JenkinsCheckBuild::BuildResult::UNSTABLE %>':
        color = "red";
        break;
    }

    ret = ret.replace("COLOR", color);
    ret = ret.replace("IMG", img);
    var span = $('<span>').css('color', color);
    if (img !== '') {
      img = $('<i>').addClass("fa fa-cog fa-spin fa-fw");
      span.html(img).append(params);
    } else {
      span.text(params);
    }

    return span;
  }

  /*
   {"job_id":"4c0a2d3c-255d-429e-9dfb-68739d8d9f11","job_name":"JenkinsStartBuild","status":4,"queue":"default","scheduled_at":"2016-04-27T20:59:49.841Z",
   "enqueued_at":"2016-04-27T20:59:49.902Z","started_at":"2016-04-27T20:59:49.911Z","completed_at":"2016-04-27T20:59:51.312Z","last_error":null,
   "result":"Jenkins server created.Jenkins job PRISME_ISAAC-term-convert-loinc_2016_04_27T16_59_49 created.Jenkins build started.","user":null,
   "parent_job_id":null,"root_job_id":null,"leaf":false,"json_data":"null","created_at":"2016-04-27T20:59:49.851Z","updated_at":"2016-04-27T21:00:21.795Z",
   "leaf_data":{"jenkins_check_job_id":"7d0826f8-6c55-46a3-8c0e-36b1a8456ced","jenkins_job_name":"PRISME_ISAAC-term-convert-loinc_2016_04_27T16_59_49",
   "jenkins_attempt_number":1,"jenkins_build_result":"SUCCESS","jenkins_job_deleted":"yes"}}
   */
  var fields = ['job_name', 'started_at', 'user', 'leaf_data.jenkins_job_name', 'leaf_data.jenkins_attempt_number', 'leaf_data.jenkins_build_result', 'leaf_data.completed_at', 'leaf_data.elapsed_time', 'leaf_data.jenkins_job_deleted'];

  function loadTable(tableId, fields, data) {
    $('#' + tableId + ' tbody').empty();

    if (data.length > 0) {
      $.each(data, function (index, row) {
        var tr_data = $('<tr>');

        $.each(fields, function (index, field) {
          if (field === 'started_at') {
            tr_data.append($('<td>').text(format_epoch_in_local(row.started_at)));
          }
          else if (field === 'leaf_data.jenkins_build_result') {
            tr_data.append($('<td>').html(build_status_renderer(row.leaf_data.jenkins_build_result)));
          }
          else if (field === 'leaf_data.completed_at') {
            tr_data.append($('<td>').text(format_epoch_in_local(row.leaf_data.completed_at)));
          }
          else {
            tr_data.append($('<td>').text(eval('row.' + field)));
          }
        });
        $('#' + tableId + ' tbody').append(tr_data);
      });
    }
    else {
      var rows = '<tr><td colspan="9" style="text-align:center">There are no items to list...</td></tr>';
      $('#' + tableId + ' tbody').html(rows);
    }
  }

  function poll() {
    console.log('calling poll');
    var row_limit = parseInt($('#filter_rows').find('option:selected').val());

    $.getJSON(gon.routes.terminology_converter_load_build_data_path, {row_limit: row_limit}, function (data) {
      loadTable('data-table', fields, data);

      <% if Rails.env.development? %>
      if (polling.isPolling('terminology_converter')) {
        $.getJSON(gon.routes.terminology_converter_check_polling_path, {}, function (data) {
          console.log(JSON.stringify(data));
          if (data.poll === false) {
            polling.unregisterController('terminology_converter');

            //call final poll in case there is a timing issue
            poll();
          }
        });
      }
      <% end %>
    });
  }

  $(document).ready(function () {
    poll();

    //register for polling
    polling.registerController('terminology_converter', poll, 5000);

    // call init_select2 to initialize all select inputs to use the select2 js library
    init_select2();

    // initialize the jquery validation plugin
    $('#myForm').validate({
      errorPlacement: function(error, element) {
        var lbl = $("label[for='"+ element.attr('id')+"']");
        error.addClass('arrow_box');
        error.insertAfter(lbl);
      }//,
      //wrapper: 'span'
    });
  });


  //
  ////    build a drop down
  //    var dd = $('<select>').attr('name', 'kma').attr('id', 'kma').attr('multiple', true);
  //    dd.data('placeholder', 'enter something');
  ////    dd.append($('<option>').text('').attr('value', ''));
  //    dd.append($('<option>').text('first').attr('value', 1).attr('title', 'this is the first one bobo'));
  //    dd.append($('<option>').text('second').attr('value', 2).attr('title', 'this is the second item !'));
  //    dd.append($('<option>').text('third').attr('value', 3));
  ////    dd.addClass('chosen');
  //    $("#kma_div").html(dd);
  //    $( "#kma" ).select2({
  //      theme: "bootstrap",
  //      width: '500px',
  //      tags: true
  //    });
  //    $(".chosen").chosen({
  //      'no_results_text' :'Oops, nothing found!',
  //      'width'           :'700px',
  //      'search_contains' : true,
  //      'placeholder_text_multiple':'Please choose something ...',
  //      'display_selected_options':false
  //    });

  //    dd.chosen({});
</script>
