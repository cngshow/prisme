<!-- Trigger the modal with a button -->
<button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal" onclick="reset_form();">Request New Build</button>

<h1>Terminology Converter Dashboard</h1>

<!-- Jenkins build job ag-grid div -->
<div id="build_results_div" style="height: 100%;" class="ag-fresh"></div>

<!-- Modal -->
<div id="myModal" class="modal fade" role="dialog">
  <div class="modal-dialog">

    <!-- Modal content-->
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">Select the Terminology Source</h4>
      </div>
      <div class="modal-body">
        <%= form_tag(:controller => 'terminology_converter', :action => :request_build, remote: true) do |f| %>
            <%= label_tag 'terminology_source', 'Terminology Source' %><br>
            <%= select_tag 'terminology_source', options_for_select(@options.collect { |o| [o[:key], o[:value]] }), :include_blank => '-- Select the Terminology Source --', required: true %>
            <br>
            <br>
            <div class="modal-footer">
              <%= submit_tag "Submit", data: {disable_with: "Please wait..."} %>
            </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
  function reset_form() {
    $('#terminology_source option[value=""]').prop('selected', 'selected').change();
  }

  function build_status_renderer(params) {
    var element = document.createElement("span");
    var textNode = document.createTextNode(params.value);

    switch (params.value) {
      case '<%= JenkinsCheckBuild::BuildResult::INQUEUE %>':
      case '<%= JenkinsCheckBuild::BuildResult::IN_PROCESS %>':
      case '<%= JenkinsCheckBuild::BuildResult::REBUILDING %>':
      case '<%= JenkinsCheckBuild::BuildResult::BUILDING %>':
      default:
        var imageElement = document.createElement("img");
        imageElement.src = "ajax-loader.gif";
        element.appendChild(imageElement);
        break;
      case '<%= JenkinsCheckBuild::BuildResult::SUCCESS %>':
        element.style.color = 'green';
        break;
      case '<%= JenkinsCheckBuild::BuildResult::SERVER_ERROR %>':
      case '<%= JenkinsCheckBuild::BuildResult::FAILURE %>':
      case '<%= JenkinsCheckBuild::BuildResult::ABORTED %>':
      case '<%= JenkinsCheckBuild::BuildResult::UNKNOWN %>':
      case '<%= JenkinsCheckBuild::BuildResult::UNSTABLE %>':
        element.style.color = 'red';
        break;
    }

    element.appendChild(textNode);
    return element;
  }
  function format_epoch_in_local(params) {
    var ret = params.value;

    if ($.isNumeric(params.value)) {
      var i = parseInt(params.value) * 1000;
      ret = new Date(i).toLocaleString();
    }
    return ret;
  }

  var columnDefs = [
    {headerName: "Job Name", field: "job_name", width: 150},
    {headerName: "Started At", field: "started_at", width: 215,
      cellRenderer: function (params) {
        return format_epoch_in_local(params);
      }
    },
    {headerName: "User", field: "user", width: 110},
    {headerName: "Jenkins Build Name", field: "leaf_data.jenkins_job_name", width: 350},
    {headerName: "Attempts", field: "leaf_data.jenkins_attempt_number", width: 150},
    {
      headerName: "Build Result", field: "leaf_data.jenkins_build_result", width: 100,
      cellRenderer: function (params) {      // Function cell renderer
        return build_status_renderer(params);
      }
    },
    {headerName: "Completed At", field: "leaf_data.completed_at", width: 215,
      cellRenderer: function (params) {
        return format_epoch_in_local(params);
      }
    },
    {headerName: "Jenkins Job Deleted?", field: "leaf_data.jenkins_job_deleted", width: 200}
  ];
  /*
   {"job_id":"4c0a2d3c-255d-429e-9dfb-68739d8d9f11","job_name":"JenkinsStartBuild","status":4,"queue":"default","scheduled_at":"2016-04-27T20:59:49.841Z",
   "enqueued_at":"2016-04-27T20:59:49.902Z","started_at":"2016-04-27T20:59:49.911Z","completed_at":"2016-04-27T20:59:51.312Z","last_error":null,
   "result":"Jenkins server created.Jenkins job PRISME_ISAAC-term-convert-loinc_2016_04_27T16_59_49 created.Jenkins build started.","user":null,
   "parent_job_id":null,"root_job_id":null,"leaf":false,"json_data":"null","created_at":"2016-04-27T20:59:49.851Z","updated_at":"2016-04-27T21:00:21.795Z",
   "leaf_data":{"jenkins_check_job_id":"7d0826f8-6c55-46a3-8c0e-36b1a8456ced","jenkins_job_name":"PRISME_ISAAC-term-convert-loinc_2016_04_27T16_59_49",
   "jenkins_attempt_number":1,"jenkins_build_result":"SUCCESS","jenkins_job_deleted":"yes"}}
   */

  var gridOptions = {
    columnDefs: columnDefs,
    enableColResize: true,
    rowData: null
  };

  function poll() {
    console.log('calling poll');
    $.getJSON(gon.routes.terminology_converter_load_build_data_path, {}, function (data) {
      gridOptions.api.setRowData(data);
      gridOptions.api.sizeColumnsToFit();

      <% if Rails.env.development? %>
      $.getJSON(gon.routes.terminology_converter_check_polling_path, {}, function (data) {
        console.log(JSON.stringify(data));
        if (data.poll === false) {
          polling.unregisterController('terminology_converter');
        }
      });
      <% end %>
    });
  }

  $(document).ready(function () {
    var gridDiv = document.querySelector("#build_results_div");
    new agGrid.Grid(gridDiv, gridOptions);
    poll();

    //register for polling
    polling.registerController('terminology_converter', poll, 15000);

//    you want to call gridOptions.api.destroy(); when leaving to prevent memory leak

  });
</script>
