<table id="data-table" class="prisme-table table-striped table-hover">
  <thead>
  <tr>
    <% locals['fields'].keys.each do |col| %>
    <th><%= raw locals['fields'][col] %></th>
    <% end %>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="<%= locals['fields'].keys.length.to_s %>" class="text-center">There are no items to list...</td>
  </tr>
  </tbody>
</table>
<br/>

<script>
  function completedAt(row) {
    var ret = format_epoch_in_local(row.leaf_data.completed_at);
    var buildResult = row.leaf_data.jenkins_build_result;

    switch (buildResult) {
      case '<%= JenkinsCheckBuild::BuildResult::INQUEUE %>':
      case '<%= JenkinsCheckBuild::BuildResult::IN_PROCESS %>':
      case '<%= JenkinsCheckBuild::BuildResult::REBUILDING %>':
      case '<%= JenkinsCheckBuild::BuildResult::SERVER_ERROR %>':
        ret = buildResult;
        break;
    }
    return ret;
  }

  function build_status_renderer(params) {
    var img = '';
    var color = 'black';

    switch (params) {
      case '<%= JenkinsCheckBuild::BuildResult::INQUEUE %>':
      case '<%= JenkinsCheckBuild::BuildResult::IN_PROCESS %>':
      case '<%= JenkinsCheckBuild::BuildResult::REBUILDING %>':
      case '<%= JenkinsCheckBuild::BuildResult::BUILDING %>':
      default:
        img = "building...";
        break;
      case '<%= JenkinsCheckBuild::BuildResult::SUCCESS %>':
        color = 'green';
        break;
      case '<%= JenkinsCheckBuild::BuildResult::SERVER_ERROR %>':
      case '<%= JenkinsCheckBuild::BuildResult::FAILURE %>':
      case '<%= JenkinsCheckBuild::BuildResult::ABORTED %>':
      case '<%= JenkinsCheckBuild::BuildResult::UNKNOWN %>':
      case '<%= JenkinsCheckBuild::BuildResult::UNSTABLE %>':
        color = "red";
        break;
    }

    var span = $('<span>').css('color', color);
    if (img !== '') {
      img = $('<i>').addClass("fa fa-cog fa-spin fa-fw");
      span.html(img).append(params);
    } else {
      span.text(params);
    }

    return span;
  }

  var fields = <%= raw locals['fields'].to_json %>;

  function loadTable(tableId, data) {
    $('#' + tableId + ' tbody').empty();

    if (data.length > 0) {
      $.each(data, function (index, row) {
        var tr_data = $('<tr>');

        $.each(fields, function (key, value) {
          var buildResult = row.leaf_data.jenkins_build_result;

          if (key === 'started_at') {
            tr_data.append($('<td>').text(format_epoch_in_local(row.started_at)));
          }
          else if (key === 'leaf_data.jenkins_build_result') {
            tr_data.append($('<td>').html(build_status_renderer(buildResult)));
          }
          else if (key === 'leaf_data.completed_at') {
            tr_data.append($('<td>').text(completedAt(row)));
          }
          else if (key === 'ibdf_files') {
            tr_data.append($('<td>').html(row.ibdf_files));
          }
          else {
            tr_data.append($('<td>').text(eval('row.' + key)));
          }
        });
        $('#' + tableId + ' tbody').append(tr_data);
      });
    }
    else {
      var rows = '<tr><td colspan="<%= locals['fields'].keys.length.to_s %>" class="text-center">There are no items to list...</td></tr>';
      $('#' + tableId + ' tbody').html(rows);
    }
  }

  function poll_params() {
      var row_limit = $('#<%= locals['poll_key'] %>').find('option:selected').val();
      return {row_limit: row_limit};
  }

  function poll_callback(data) {
      loadTable('data-table', data);
  }

  $(document).ready(function () {
      //register for polling
      PollMgr.registerPoller(new Poller('<%= locals['poll_key'] %>', <%=($PROPS['JENKINS.build_check_seconds'].to_i / 2) * 1000%>, <%= locals['poll_route'] %>, poll_params, poll_callback));
  });
</script>
