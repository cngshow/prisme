<style>
  .popover {
    max-width: 1000px;
  }

  .inline_align_top_div {
    display: inline-block;
    vertical-align: top;
  }

  .fileupload_div {
    display: inline-block;
    width: 525px;
    margin-right: 3px;
  }
</style>
<!-- Trigger the modal with a button -->
<br>
<button type="button" class="btn btn-lg five-compliance" data-toggle="modal" data-target="#myModal">Create Terminology Source Package</button>
<div class="page-header">
  <h1>Terminology Source Package Dashboard</h1>
</div>

<%= render 'layouts/filter_table_poll_results', filter_id: 'tsp_filter_rows', filter_label: 'Filter Results', include_all_rows: true, poll: 'poll' %>
<table id="data-table" class="prisme-table table-striped table-hover">
  <thead>
  <tr>
    <th scope="col">User Name</th>
    <th scope="col">Uploaded Files</th>
    <th scope="col">Started At</th>
    <th scope="col">State</th>
    <th scope="col">Result</th>
    <th width="300px" scope="col">Progress</th>
    <th scope="col">Job Completed At</th>
    <th scope="col">Elapsed Time</th>
  </tr>
  </thead>
  <tbody>
  <tr>
  </tr>
  <tr>
    <td colspan="8" class="text-center">There are no items to list...</td>
  </tr>
  </tbody>
</table>
<br/>

<!-- Modal -->
<div id="myModal" class="modal fade modal-wide50" role="dialog">
  <div class="modal-dialog">

    <!-- Modal content-->
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">&times;</button>
        <h2 class="modal-title">Terminology Source Package Creation</h2>
      </div>
      <div class="modal-body">
        <%= form_for(@package, remote: true, html: {multipart: true, id: 'source_package_form'}) do %>
            <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
            <div>
              <%= label_tag 'supported_converter', 'Supported Converter' %><br>
              <%= select_tag 'supported_converter',
                             options_for_select(IsaacUploader.converter_types_as_html_options),
                             :class => 'select2-prisme form-control',
                             :include_blank => true,
                             :data => {ph: 'Select a Converter Type',
                                       w: '525px',
                                       singleSelect: true,
                                       required: true
                             }
              %>
            </div>
            <br>
            <div title="Enter Your Version Number" class="input_div">
              <%= label_tag 'version', 'Version' %>&nbsp;&nbsp;<span id="version_addl_info" style="font-size: smaller"></span><br>
              <%= text_field_tag 'version', nil, data: {required: true}, placeholder: 'Enter Your Version Number', maxlength: 75, size: 75, class: 'form-control' %>
            </div>
            <br>
            <div class="input_div"><!-- todo put this everywhere and set up with jq validate-->
              <%= label_tag 'extension_name', 'Extension Name' %><br>
              <%= text_field_tag 'extension_name', nil, maxlength: 75, size: 75, placeholder: 'Enter the Extension Name (optional)', class: 'form-control' %>
            </div>
            <br>

            <div id="uploads" style="display: none">
              <fieldset class="classic-border">
                <legend class="classic-border">Source Content to Upload</legend>
                <a onclick="add_upload()" class="btn btn-primary">Add Source Upload</a>
                <br>
                <br>
                <div id="source_rows"></div>
                <br>
              </fieldset>
            </div>
        <% end %>
        <button class="btn btn-primary btn-lg" onclick="submitPackage()" id="btn_submit">Create Terminology Source Package</button>
      </div>
    </div>
  </div>
  <script>
      function add_upload(upload_json) {
          var milliseconds = (new Date).getTime();
          var input = $('<input>').attr('type', "file").attr('data-millis', milliseconds).attr('data-required', true);//todo currently all file inputs are required
          var sourceRows = $('#source_rows');
          sourceRows.append($('<div>').attr('id', 'i_' + milliseconds.toString()).addClass('fileupload_div').html(input));

          //if upload_json is undefined then the user is adding an additional source record
          if (upload_json !== undefined) {
              input.attr('data-regex_msg', upload_json['expected_naming_pattern']);
              input.attr('pattern', upload_json['expected_name_regex']);

              var suggested_source_url = upload_json['suggested_source_url'];
              var suggested_source_location = upload_json['suggested_source_location'];
              var sample_name = upload_json['sample_name'];
              var source_msg = '';

              if (sample_name !== '') {
                  source_msg += '<strong>Sample Name:&nbsp;</strong>' + sample_name + '<br><br>';
              }
              if (suggested_source_location !== '') {
                  source_msg += '<strong>Suggested Source Location:&nbsp;</strong>' + suggested_source_location + '<br><br>';
              }
              if (suggested_source_url !== '') {
                  source_msg += '<strong>Suggested Source URL:&nbsp;</strong>' + suggested_source_url + '<br>';
              }

              var info = $('<a>').html('<i class="fa fa-info-circle fa-2x" aria-hidden="true"></i>');
              sourceRows.append($('<div>').addClass("inline_align_top_div").html(info));

              info.popover({
                  html: true,
                  container: 'body',
                  title: 'File Upload Information',
                  content: "<div><p>" + upload_json['expected_naming_pattern'] + "</p></div>" +
                  "<div><p>" + source_msg + "</p></div>",
                  placement: 'bottom'
              });
          } else {
              // user is manually adding an upload row
              var btn_rm = $('<a>').addClass('btn btn-danger').text('X').on('click', function () {
                  $('#i_' + milliseconds.toString()).remove();
                  $('#x_' + milliseconds.toString()).remove();
              });
              sourceRows.append($('<div>').attr('id', 'x_' + milliseconds.toString()).addClass("inline_align_top_div").html(btn_rm));
          }

          input.fileinput({
              showRemove: false,
              showClose: true,
              showUpload: false,
              showPreview: false
          });
      }

      function submitPackage() {
          var $btnSubmit = $("#btn_submit");
          $btnSubmit.attr('disabled', true);

          if ($btnSubmit.hasClass('processing')) {
              return false;
          } else {
              $btnSubmit.addClass('processing');
          }

          var submit_form = true;
          var warning = "There are possible validation errors in the file names specified to upload.<br><br>MSG<br><br>Do you want to continue and submit this request?";
          var warn_msg = "";
          var req_msg = "";

          $('[data-required]').each(function (index, value) {
              if (value.value === '') {
                  var id = $(value).attr('id');

                  if (id === 'supported_converter') {
                      req_msg += '<li>The Converter Type is required.</li>';
                  }
                  else if (id === 'version') {
                      req_msg += '<li>The Version is required.</li>';
                  }
                  else {
                      req_msg += '<li>Source content is required.</li>';
                  }
                  submit_form = false;
              }
          });

          var $version = $('#version');
          var regex_validator = new RegExp($version.data('regex'), 'i');

          //validate that the version is in the correct format
          var version_val = $version.val();
          if (version_val.length > 0 && !regex_validator.test(version_val)) {
              req_msg += '<li>Version format error.</li>';
              submit_form = false;
          }

          if (req_msg !== '') {
              bootbox.alert({
                  size: 'normal',
                  title: 'Validation Error(s)',
                  message: 'The following validation error(s) were detected:<br><br><ol>' + req_msg + '</ol><br><br>Please enter all of the required data before submitting the form.'
              });
          }

          if (submit_form) {
              $('[data-millis]').each(function (index, value) {
                  $(this).attr('name', 'terminology_source_package[terminology_source_contents_attributes][' + index + '][upload]');
                  var reggie = new RegExp($(this).attr('pattern'), 'i');
                  console.log(value.value + '::' + reggie.toString() + ' regex passes? ' + reggie.test(value.value).toString());

                  if (!reggie.test(value.value)) {
                      var filename = value.value;
                      if (filename.lastIndexOf('\\') > 0) {
                          filename = filename.substr(filename.lastIndexOf('\\') + 1);
                      } else if (filename.lastIndexOf('\/') > 0) {
                          filename = filename.substr(filename.lastIndexOf('\/') + 1);
                      }

                      warn_msg += "<span style=\"font-weight: bold; color: red\">" + filename + "</span> does not match the expected pattern.<br>- " + $(this).attr('data-regex_msg') + "<br><br>";
                  }
              });

              if (warn_msg !== '') {
                  warning = warning.replace('MSG', warn_msg);
                  bootbox.confirm({
                      size: 'large',
                      title: 'Warning',
                      message: warning,
                      callback: function (result) {
                          submitForm(result);
                      }
                  });
                  return false;
              }
          }

          // this is a check due to timing with the AJAX call to get the required source documents
          //if the uploads are not visible then we are not submitting the form
          if (! $('#uploads').is(':visible')) {
              submit_form = false;
          }

          submitForm(submit_form);
      }

      function submitForm(bool) {
          var $btnSubmit = $("#btn_submit");

          if (bool) {
              $btnSubmit.html('<span><i class="fa fa-cog fa-spin fa-fw" aria-hidden="true"></i>Uploading...Please Wait</span>');
              $('#source_package_form').submit();
          } else {
              $btnSubmit.removeClass('processing');
              $btnSubmit.attr('disabled', false);
          }
      }

      function loadTable(tableId, data) {
          var fields = ['user', 'uploaded_files', 'started_at', 'state', 'result', 'progress', 'state_time', 'elapsed_time'];
          $('#' + tableId).find('tbody').empty();

          if (data.length > 0) {
              $.each(data, function (index, row) {
                  var tr_data = $('<tr>');
                  var state_unknown = (row.state === 'UNKNOWN');

                  inner_loop:
                      for (var f = 0; f < fields.length; f++) {
                          var field = fields[f];

                          if (field === 'started_at') {
                              tr_data.append($('<td>').text(format_epoch_in_local(row.started_at)));
                          }
                          else if (field === 'state' && state_unknown) {
                              tr_data.append($('<td>').text(row.state));
                              tr_data.append($('<td>').text(''));//result
                              tr_data.append($('<td>').text(''));//progress
                              tr_data.append($('<td>').text(''));//state_time
                              tr_data.append($('<td>').text(''));//elapsed_time
                              break;
                          }
                          else if (field === 'progress') {
                              var title = row.progress < 100 ? row.title : '';
                              var pbar = $('<div>').addClass('progress-bar')
                                  .prop('role', 'progressbar')
                                  .attr('aria-valuenow', row.progress)
                                  .attr('aria-valuemin', 0)
                                  .attr('aria-valuemax', 100)
                                  .css('width', row.progress.toString() + '%')
                                  .text(row.progress.toString() + '%');
                              tr_data.append($('<td>').html($('<span>').html(title + '<br>').append($('<div>').addClass("progress").html(pbar))));
                          }
                          else if (field === 'state_time') {
                              var txt = row.progress < 100 ? 'Running...' : format_epoch_in_local(row.state_time);
                              tr_data.append($('<td>').text(txt));
                          }
                          else {
                              tr_data.append($('<td>').text(eval('row.' + field)));
                          }
                      }
                  $('#' + tableId + ' tbody').append(tr_data);
              });
          }
          else {
              var rows = '<tr><td colspan="8" class="text-center">There are no items to list...</td></tr>';
              $('#' + tableId + ' tbody').html(rows);
          }
      }

      function poll_params() {
          var row_limit = $('#tsp_filter_rows').find('option:selected').val();
          return {row_limit: row_limit};
      }

      function poll_callback(data) {
          loadTable('data-table', data);
      }

      $(document).ready(function () {
          // remove popovers when the modal window is closed
          $(document).on('hide.bs.modal', '#myModal', function () {
              $('div.popover').remove();
          });

          // set the onchange for the supported_converter selection
          $('#supported_converter').change(function () {
              $('#uploads').hide();
              $('#source_rows').empty();
              $('div.popover').remove();
              var converter = this.value;

              if (converter !== '') {
                  $.ajax({
                      url: gon.routes.terminology_source_packages_converter_change_path,
                      type: "GET",
                      data: {converter: converter},
                      success: function (data) {
                          $.each(data['upload_file_info'], function () {
                              add_upload(this);
                          });

                          // update the version validation regex based on the converter type
                          var version_validation = data['version_validation'];

                          $('#version').data('regex', version_validation['regex'])

                          //add the desription text to the page
                          $('#version_addl_info').text('(' + version_validation['description'] + ')');

                          $('#uploads').fadeIn();
                      }
                  });
              } else {
                  $('#version_addl_info').text('');
              }

              var placeholder = converter == 'SCT_EXTENSION' ? 'Enter the Extension Name (e.g. US)' : 'Enter the Extension Name (optional)';
              $('#extension_name').attr('required', (converter == 'SCT_EXTENSION')).attr('placeholder', placeholder);
          });

          // call init_select2 to initialize all select inputs to use the select2 js library
          init_select2();

          //register for polling
          var tsp_poller = new Poller('term_source_pkg_poller', 1000, gon.routes.terminology_source_packages_load_build_data_path, poll_params, poll_callback);
          PollMgr.registerPoller(tsp_poller);
      });
  </script>
</div>
