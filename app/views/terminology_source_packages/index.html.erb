<style>
  .popover {
    max-width: 1000px;
  }

  .modal-wide .modal-dialog {
    width: 50%; /* or whatever you wish */
  }

  .inline_align_top_div {
    display: inline-block;
    vertical-align: top;
  }

  .fileupload_div {
    display: inline-block;
    width: 80%;
    /*height: 100px;*/
    /*margin: 3px;*/
  }
</style>
<script>
  function tsp_poll() {
    console.log('calling tsp_poller...');//todo implement this
  }
</script>
<!-- Trigger the modal with a button -->
<button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal">Create New Terminology Source Package</button>
<div class="page-header">
  <h1>Terminology Source Package Dashboard</h1>
</div>

<%= render 'layouts/filter_table_poll_results', filter_id: 'tsp_filter_rows', filter_label: 'Filter Results', poll: 'tsp_poll()' %>
<table id="data-table" class="prisme-table table-striped table-hover">
  <thead>
  <tr>
    <th>User Name</th>
    <th>Uploaded Files</th>
    <th>Started At</th>
    <th>State</th>
    <th>Result</th>
    <th width="300px">Progress</th>
    <th>Job Completed At</th>
    <th>Elapsed Time</th>
  </tr>
  </thead>
  <tbody>
  <tr>
  </tr>
  <tr>
    <td colspan="8" style="text-align:center">There are no items to list...</td>
  </tr>
  </tbody>
</table>
<br/>

<!-- Modal -->
<div id="myModal" class="modal fade modal-wide" role="dialog">
  <div class="modal-dialog">

    <!-- Modal content-->
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">Terminology Source Package Creation</h4>
      </div>
      <div class="modal-body">
        <%= form_for(@package, remote: true, html: {multipart: true}) do %>
            <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
            <%= label_tag 'supported_converter', 'Supported Converter' %><br>
            <%= select_tag 'supported_converter',
                           options_for_select(IsaacUploader.converter_types_as_html_options),
                           {:prompt => '-- Select a Converter Type --'} %><br><br>

            <%= label_tag 'version', 'Version' %><br>
            <%= text_field_tag 'version', nil, required: true, data: {required: true}, placeholder: 'Enter Your Version Number', title: 'Enter Your Version Number', width: '150px', maxlength: 75, size: 75 %>
            <br><br>

            <%= label_tag 'extension_name', 'Extension Name' %><br>
            <%= text_field_tag 'extension_name', nil, width: '150px', maxlength: 75, size: 75 %><br><br>

            <div id="uploads" style="display: none">
              <h4>Source Content to Upload</h4>
              <a onclick="add_upload()" class="btn btn-primary">Add Source Upload</a>
              <br>
              <br>
              <div id="source_rows"></div>
              <br>
              <hr>
              <div class="btn btn-primary btn-lg" onclick="submitPackage()" id="btn_submit">Create Terminology Source Package</div>
              <button id="btn_submit_hidden" style="display: none"></button>
            </div>
        <% end %>
      </div>
    </div>
  </div>
  <script>
    function add_upload(upload_json) {
      var milliseconds = (new Date).getTime();
      var input = $('<input>').attr('type', "file").attr('data-millis', milliseconds).attr('data-required', true).attr('required', true);//todo currently all file inputs are required
      var sourceRows = $('#source_rows');
      sourceRows.append($('<div>').attr('id', 'i_' + milliseconds.toString()).addClass('fileupload_div').html(input));

      //if upload_json is undefined then the user is adding an additional source record
      if (upload_json !== undefined) {
//        input.attr('required', upload_json['file_required']);//todo use this for input params
//        input.attr('data-required', true);
        input.attr('data-reggie', upload_json['expected_naming_pattern']);
        input.attr('pattern', upload_json['expected_name_regex']);

        var suggested_source_url = upload_json['suggested_source_url'];
        var suggested_source_location = upload_json['suggested_source_location'];
        var sample_name = upload_json['sample_name'];
//        var file_required = upload_json['file_required'];
        var source_msg = '';

        if (sample_name !== '') {
          source_msg += '<strong>Sample Name:&nbsp;</strong>' + sample_name + '<br><br>';
        }
        if (suggested_source_location !== '') {
          source_msg += '<strong>Suggested Source Location:&nbsp;</strong>' + suggested_source_location + '<br><br>';
        }
        if (suggested_source_url !== '') {
          source_msg += '<strong>Suggested Source URL:&nbsp;</strong>' + suggested_source_url + '<br>';
        }

        var info = $('<a>').html('&nbsp;<i class="fa fa-info-circle fa-2x" aria-hidden="true"></i>');
        sourceRows.append($('<div>').addClass("inline_align_top_div").html(info));

        info.popover({
          html: true,
          container: 'body',
          title: 'File Upload Information',
          content: "<div><p>" + upload_json['expected_naming_pattern'] + "</p></div>" +
          "<div><p>" + source_msg + "</p></div>",
          placement: 'bottom'
        });
      } else {
        // user is manually adding an upload row
        var btn_rm = $('<a>').addClass('btn btn-danger').text('X').on('click', function () {
          $('#i_' + milliseconds.toString()).remove();
          $('#x_' + milliseconds.toString()).remove();
        });
        sourceRows.append($('<div>').attr('id', 'x_' + milliseconds.toString()).addClass("inline_align_top_div").html(btn_rm));
      }

      input.fileinput({
//        msgNo: 'Please choose a file to upload. No',
//        minFileCount: 1,
        showRemove: false,
        showClose: true,
        showUpload: false,
        showPreview: false
      });
    }

    function submitPackage() {
      var submit_form = true;
      var warning = "There are possible validation errors in the file names specified to upload.\n\nMSG\n\nDo you want to continue and submit this request?";
      var warn_msg = "";

      $('[data-required]').each(function (index, value) {
        if (value.value === '') {
          submit_form = false;
        }
      });

      if (submit_form) {
        $('[data-millis]').each(function (index, value) {
          $(this).attr('name', 'terminology_source_package[terminology_source_contents_attributes][' + index + '][upload]');
          var reggie = new RegExp($(this).attr('pattern'), 'i');
          console.log(value.value + '::' + reggie.toString() + ' regex passes? ' + reggie.test(value.value).toString());

          if (!reggie.test(value.value)) {
            warn_msg += $(this).attr('data-reggie') + "\n\n";
          }
        });

        if (warn_msg !== '') {
          warning = warning.replace('MSG', warn_msg);
          submit_form = (confirm(warning));
          if (!submit_form) return false;
        }
      }

      if (submit_form) {
        $("#btn_submit").attr('onclick', 'return false;').html('<span><i class="fa fa-cog fa-spin fa-fw" aria-hidden="true"></i>Uploading...Please Wait</span>');
      }

      //submit the form in all cases to have the validations kick in
      $('#btn_submit_hidden').click();
    }

    var fields = ['user', 'uploaded_files', 'started_at', 'state', 'result', 'progress', 'state_time', 'elapsed_time'];

    function loadTable(tableId, fields, data) {
      $('#' + tableId).find('tbody').empty();

      if (data.length > 0) {
        $.each(data, function (index, row) {
          var tr_data = $('<tr>');
          var state_unknown = (row.state === 'UNKNOWN');

          inner_loop:
          for (var f = 0; f < fields.length; f++) {
            var field = fields[f];

            if (field === 'started_at') {
              tr_data.append($('<td>').text(format_epoch_in_local(row.started_at)));
            }
            else if (field === 'state' && state_unknown) {
              tr_data.append($('<td>').text(row.state));
              tr_data.append($('<td>').text(''));//result
              tr_data.append($('<td>').text(''));//progress
              tr_data.append($('<td>').text(''));//state_time
              tr_data.append($('<td>').text(''));//elapsed_time
              break inner_loop;
            }
            else if (field === 'progress') {
              var title = row.progress < 100 ? row.title : '';
              var pbar = $('<div>').addClass('progress-bar')
                  .prop('role', 'progressbar')
                  .attr('aria-valuenow', row.progress)
                  .attr('aria-valuemin', 0)
                  .attr('aria-valuemax', 100)
                  .css('width', row.progress.toString() + '%')
                  .text(row.progress.toString() + '%');
              tr_data.append($('<td>').html($('<span>').html(title + '<br>').append($('<div>').addClass("progress").html(pbar))));
            }
            else if (field === 'state_time') {
              var txt = row.progress < 100 ? 'Running...' : format_epoch_in_local(row.state_time);
              tr_data.append($('<td>').text(txt));
            }
            else {
              tr_data.append($('<td>').text(eval('row.' + field)));
            }
          };
          $('#' + tableId + ' tbody').append(tr_data);
        });
      }
      else {
        var rows = '<tr><td colspan="8" style="text-align:center">There are no items to list...</td></tr>';
        $('#' + tableId + ' tbody').html(rows);
      }
    }

    function poll() {
      console.log('calling poll');
      var row_limit = parseInt($('#tsp_filter_rows').find('option:selected').val());

      $.getJSON(gon.routes.terminology_source_packages_load_build_data_path, {row_limit: row_limit}, function (data) {
        loadTable('data-table', fields, data);

        <% if Rails.env.development? %>
        if (polling.isPolling('terminology_source_packages')) {
          $.getJSON(gon.routes.terminology_source_packages_check_polling_path, {}, function (data) {
            console.log(JSON.stringify(data));
            if (data.poll === false) {
              polling.unregisterController('terminology_source_packages');

              //call final poll in case there is a timing issue
              poll();
            }
          });
        }
        <% end %>
      });
    }

    $(document).ready(function () {
      // remove popovers when the modal window is closed
      $(document).on('hide.bs.modal', '#myModal', function () {
        $('div.popover').remove();
      });

      // set the onchange for the supported_converter selection
      $('#supported_converter').change(function () {
        $('#uploads').hide();
        $('#source_rows').empty();
        $('div.popover').remove();
        var converter = this.value;

        if (converter !== '') {
          $.ajax({
            url: gon.routes.terminology_source_packages_converter_change_path,
            type: "GET",
            data: {converter: converter},
            success: function (data) {
              $.each(data['upload_file_info'], function () {
                add_upload(this);
              });
              $('#uploads').fadeIn();
            }
          });
        }
      });

      poll();

      //register for polling
      polling.registerController('terminology_source_packages', poll, 1000);
    });
  </script>
</div>
