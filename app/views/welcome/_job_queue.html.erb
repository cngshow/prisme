<h2>PRISME Job Queue</h2>
<%= render 'layouts/filter_table_poll_results', filter_id: 'pjq_filter_rows', filter_label: 'Filter Results', include_all_rows: false, poll: 'reload' %>

<table id="data-table" class="prisme-table table-striped table-hover">
  <thead>
  <tr>
    <th scope="col" >Job Name</th>
    <th scope="col"  width="10%">Status</th>
    <th colspan="2" width="20%" scope="col" >Job Execution Times</th>
    <th scope="col" >Elapsed Time</th>
    <th scope="col" >User</th>
    <th scope="col" >Last Error</th>
    <th scope="col" >Result</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <td colspan="8" class="text-center" scope="col">There are no items to list...</td>
  </tr>
  </tbody>
</table>
<br/>
<style>
  tr.queue {
    vertical-align: text-top;
  }
</style>
<script>
  var fields = ['job_name', 'status', 'execution_times', 'elapsed_time', 'user', 'last_error', 'result'];

  function loadTable(tableId, data) {
    $('#' + tableId + ' tbody').empty();

    $.each(data, function (index, item) {
      // create the row adding a data-job_id attribute
      var row = $('<tr>').addClass('queue').data('job_id', item['job_id']);

      $.each(fields, function (index, field) {
        var item_value = item[field + ''];

        if (field === 'status') {
          var row_status = $('<td>').text(gon.job_status_constants[item_value]);

          if (item_value === <%= PrismeJobConstants::Status::STATUS_HASH[:QUEUED] %> ||
              item_value === <%= PrismeJobConstants::Status::STATUS_HASH[:RUNNING] %>) {
            row_status.prepend($('<i class="fa fa-cog fa-fw fa-spin" aria-hidden="true"></i>'));
          }
          row.append(row_status);
        } else if (field === 'execution_times') {
          //'scheduled_at', 'enqueued_at', 'started_at', 'completed_at',
          row.append($('<td>').css('text-align', 'right').html("Enqueued At:<br>Scheduled At:<br>Started At:<br>Completed At:"));

          // times formatted with  <br>s
          var times = 'Not Yet Enqueued<br>';

          if (item['enqueued_at'] !== null) {
            times = moment(item['enqueued_at']).format('YYYY-MM-DD [at] HH:mm:ss') + '<br>';
          }

          if (item['scheduled_at'] !== null) {
            times += moment(item['scheduled_at']).format('YYYY-MM-DD [at] HH:mm:ss') + '<br>';
          } else {
            times += 'Not Yet Scheduled<br>'
          }

          if (item['started_at'] !== null) {
            times += moment(item['started_at']).format('YYYY-MM-DD [at] HH:mm:ss') + '<br>';
          } else {
            times += 'Not Yet Started<br>'
          }

          if (item['completed_at'] !== null) {
            times += moment(item['completed_at']).format('YYYY-MM-DD [at] HH:mm:ss') + '<br>';
          } else {
            times += 'Not Yet Completed<br>'
          }
          row.append($('<td>').html(times));
        }
        else {
          row.append($('<td>').text(item_value));
        }
      });
      $('#' + tableId + ' tbody').append(row);
    });
  }

  function reload() {
    console.log('calling reload!');
    var rowlimit = arguments[0];

    if (rowlimit === undefined) {
      rowlimit = $('#pjq_filter_rows').find('option:selected').val();
    }

    $.getJSON(gon.routes.welcome_reload_job_queue_list_path, {row_limit: rowlimit}, function (data) {
      loadTable('data-table', data);
    })
  }

  $(document).ready(function (e) {
    // register for polling
    polling.registerPolling(polling.pollEnum.WELCOME_QUEUE, reload, 5000);
  });
</script>
